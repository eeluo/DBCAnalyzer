#include "DBCAnalyzer.h"
#include "DBCFileDescriptor.h"
#include "SignalAnalyzer.h"
#include "MessageAnalyzer.h"
#include "AttributeAnalyzer.h"
#include "NodeAnalyzer.h"
#include <iostream>
#include <vector>
#include <string>
#include <tchar.h>
#include <gtest/gtest.h>

using namespace std;

void FindMessageAndSignalNameByNodeName(void);
void FindMessageNameByTransmitter(const string &str);
void FindSignalsNameByReceiver(const string &str);
void FindAttributeNameByValueType(void);
void FindMaxAndMinValueByValueType(void);
void FindAttributeNameAndValueRangeByValueType(void);
void PrintNodes(void);
void PrintMessage(void);
void PrintMessages(void);
void PrintAttribute(void);

int main() {
	//node输出
	//PrintNodes();

	//message,signal输出
	//PrintMessage();
	//PrintMessages();

	//通过节点名称找到message_name和signal_name
	//FindMessageAndSignalNameByNodeName();

	//attribute输出
	//PrintAttribute();

	//attribute查找
	//FindAttributeNameByValueType();
	//FindMaxAndMinValueByValueType();
	//FindAttributeNameAndValueRangeByValueType();

	system("pause");
	return 0;
	
}

void FindMessageAndSignalNameByNodeName(void) {
	DBCAnalyzer dbc;
	auto descriptor = dbc.Analyze("test.dbc");
	string str;
	cout << "是否要查找节点？ Y:查找，N:不查找 ";
	cin >> str;
	if (cin.get() == 'N') { cout << "退出查找" << endl; return; }
	else{
		cout << "请输入您要查找的节点名称：";
		cin.clear();
		cin >> str;
		FindMessageNameByTransmitter(str);
		FindSignalsNameByReceiver(str);
	}
}

void FindMessageNameByTransmitter(const string &str) {
	DBCAnalyzer dbc;
	auto descriptor = dbc.Analyze("test.dbc");
	auto msg = descriptor.Messages();
	cout << "对于发送节点 \"" << str << " \"" << ", 找到以下的message_name: " << endl;
	for (auto const & _msg : descriptor.Messages()) {
		if(_msg.Transmitter()==str)
		{
			cout << _msg.Name() << endl;
		}
	}
}

void FindSignalsNameByReceiver(const string &str) {
	DBCAnalyzer dbc;
	Signal sig;
	auto descriptor = dbc.Analyze("test.dbc");
	cout << "对于接收节点 \"" << str << " \"" << ", 找到以下的signal_name: " << endl;
	for (auto const & _msg : descriptor.Messages()) {
		for (auto const & _signal : _msg.Signals()) {
			for (auto const & re_unit : _signal.Rece_unit()) {
				if (re_unit == str)
					cout << _signal.Name() << endl;
			}
		}
	}
}

void FindAttributeNameByValueType(void) {
	DBCAnalyzer dbc;
	auto descriptor = dbc.Analyze("test.dbc");
	cout << "是否要查找属性名称？ Y:查找，N:不查找 ";	
	if (cin.get() == 'N') { cout << "退出查找" << endl; return; }
	else{
		cout << "请输入您要查找的属性值 0->INT,1->HEX,2->FOLAT,3->STRING,4->ENUM：";
		int value;
		cin.clear();
		cin >> value;
		while ((value<0) | (value>4)){	
			cin.clear();
			cout << "输入错误，请重新输入：";	
			cin >> value;
		}
		Attribute::VALUE_TYPE type = Attribute::VALUE_TYPE (value);	
		for (auto const & att : descriptor.Attributes()){
			if (type == att.GetValueType()) {
				cout << att.AttributeName()<<endl;
			}
		}
	}
}

void FindMaxAndMinValueByValueType(void) {
	DBCAnalyzer dbc;
	auto descriptor = dbc.Analyze("test.dbc");
	cout << "STRING类型无法查找，ENUM类型是一系列字符串！"<<endl;
	cout << "是否要查找属性的数值范围？ Y:查找，N:不查找 ";
	if(cin.get() == 'N') { cout << "退出查找" << endl; return; }
	else {
		cout << "请输入您要查找的属性值 0->INT,1->HEX,2->FOLAT,4->ENUM：";
		int value;
		cin.clear();
		cin >> value;
		while ((value<0) |(value == 3)| (value>4)) {
			cin.clear();
			if (value == 3){
				cout << "输入错误！STRING类型没有数值，请重新输入：";
			}
			else {
				cout << "输入错误，请重新输入：";
			}
			cin >> value;
		}
		Attribute::VALUE_TYPE type = Attribute::VALUE_TYPE(value);
		for (auto const & att : descriptor.Attributes()) {
			if ((type == att.GetValueType())&&(type!= Attribute::ENUM)) {
				cout <<"min:" <<att.ValueType()[1]<<"  "<<"max:"<<att.ValueType()[2]<< endl;
			}
			if ((type == att.GetValueType()) && (type == Attribute::ENUM)) {
				for (auto it = att.ValueType().begin()+1; it != att.ValueType().end(); it++)
				{
					cout << *it << " ";
				}
				cout << endl;
			}
		}
	}
}

void FindAttributeNameAndValueRangeByValueType(void) {
	DBCAnalyzer dbc;
	auto descriptor = dbc.Analyze("test.dbc");
	cout << "是否要查找所有属性，包括名称、数值范围或系列字符串？ Y:查找，N:不查找 ";
	if (cin.get() == 'N') { cout << "退出查找" << endl; return; }
	else {
		cout << "请输入您要查找的属性值 0->INT,1->HEX,2->FOLAT,3->STRING,4->ENUM：";
		int value;
		cin.clear();
		cin >> value;
		while ((value<0) | (value>4)) {
			cin.clear();
			cout << "输入错误，请重新输入：";
			cin >> value;
		}
		Attribute::VALUE_TYPE type = Attribute::VALUE_TYPE(value);
		for (auto const & att : descriptor.Attributes()) {
			if ((type == att.GetValueType()) && (type != Attribute::ENUM) && (type != Attribute::STRING)) {
				cout << "Name:" << att.AttributeName() << "  " << "min:" << att.ValueType()[1] << "  " << "max:" << att.ValueType()[2] << endl;
			}
			if ((type == att.GetValueType()) && (type == Attribute::STRING))
			{
				cout << "Name:" << att.AttributeName() << endl;
			}
			if ((type == att.GetValueType()) && (type == Attribute::ENUM)) {
				cout <<"Name:" <<att.AttributeName() << "  "<<"String:";
				for (auto it = att.ValueType().begin() + 1; it != att.ValueType().end(); it++)
				{
					cout << *it << " ";
				}
				cout << endl;
			}
		}
	}
}

void PrintNodes(void) {
	DBCAnalyzer dbc;
	auto descriptor = dbc.Analyze("test.dbc");
	for (auto const & it : descriptor.Nodes()) {
		cout << "BU_: ";
		for (auto const &it_no : it.NodeName()) {
			cout <<it_no << " ";
		}
		cout << endl;
	}
}

void PrintMessage(void) {
	DBCAnalyzer dbc;
	auto descriptor = dbc.Analyze("test.dbc");
	for (auto const & _msg : descriptor.Messages()) {
		cout <<"BO_ "<<_msg.ID() <<" "<<_msg.Name() <<" : "<< (int)_msg.GetSize()<<" "<<_msg.Transmitter()<< endl;
	}
	cout << endl;
}

void PrintMessages(void) {
	DBCAnalyzer dbc;
	Signal sig;
	auto descriptor = dbc.Analyze("test.dbc");
	for (auto const & _msg : descriptor.Messages()) {
		cout << "BO_ " << _msg.ID() << " " << _msg.Name() << " : " << (int)_msg.GetSize() << " " << _msg.Transmitter() << endl;
		for (auto const & _signal : _msg.Signals()) {
			cout << " SG_ " << _signal.Name() << " : " << (int)_signal.StartBit() << "|" << (int)_signal.SignalSize() << "@"
				<< (int)_signal.GetByteOrder() << _signal.GetValueType()
				<< " (" << _signal.GetFactor() << "," << _signal.GetOffset() << ") "
				<< " [" << _signal.GetMinimum() << "|" << _signal.GetMaximum() << "] "
				<< "\"" << _signal.Unit() << "\""
				<< " " << _signal.Receiver() << endl;
		}
		cout << endl;
	}
	cout << endl;
}

void PrintAttribute(void) {
	DBCAnalyzer dbc;
	auto descriptor = dbc.Analyze("test.dbc");
	for (auto const & att : descriptor.Attributes())
	{
		Attribute::VALUE_TYPE type = att.GetValueType();
		switch (type)
		{
		case Attribute::INT:
		case Attribute::HEX:
		case Attribute::FLOAT:
		case Attribute::ENUM:
			cout << "BA_DEF_ " << att.ObjType() << " " << att.AttributeName() << " ";
			for (auto const & it : att.ValueType())
			{
				cout << it << " ";
			}
			cout << ";" << endl;
			break;
		case Attribute::STRING:
			cout << "BA_DEF_ " << att.ObjType() << " " << att.AttributeName() << " " << att.ValueType()[0] << ";" << endl;
			break;
		default:
			cout << "BA_DEF_DEF_ " << att.AttributeName() << " "<< att.DefaultValue() << ";" << endl;
			break;
		}
	}
}

//int _tmain(int argc, _TCHAR* argv[])
//{
//	testing::InitGoogleTest(&argc, argv);
//	 RUN_ALL_TESTS();
//	 cin.get();
//	 return 0;
//}
